= Burp
== Why Burp?
Did you ever get a list of structured data (for example an array of hash data) and get a bit of indigestion when you realize that the uniq attribute(s) of the data is buried underneath the array? Well, if you're like me you're tired of having to do something like

    structured_array = list_of_stuff.map{|struc_data| organize(struc_data)}
    a_nice_hash = Hash.new[structured_array]

Burp provides an easier way

== Basic Burp
Oh yum, look at this collection of hashes I have to manage. Each with a unique id to represent it:
  
    array_of_hashes = [
                        {:id => :a, :data => "A"},
                        {:id => :b, :data => "B"},
                        {:id => :c, :data => "C"}
                      ]

I feel like referencing :b's data today:

Yes, you could just select what you need the boring, ugly way

    b_data = yummy.select{|node| node[:id] == :b}.first

That's not hard, but rather than manually select it, let's just let out a hearty burp

    burped = Burp.new(yummy, :id)

and get good old fashioned hash in return

    #=> { :a => {:id => :a, :data => "A" },
          :b => {:id => :b, :data => "B" },
          :c => {:id => :c, :data => "C" }

meaning that

    b_data = burped[:b]

As a special side-dish, Burp can handle things that are a bit messier as well

    fly_in_my_soup = [
                       {:id => :a, :data => "A"},
                       {:id => :b, :data => "B"},
                       {:id => :c, :data => "C"},
                       {:fly => :d, :data => "D"}
                     ] 

    yummy_soup = Burped.new(fly_in_my_soup)
      #=> { :a => {:id => :a, :data => "A" },
            :b => {:id => :b, :data => "B" },
            :c => {:id => :c, :data => "C" }

    fly = yummy_soup.left_overs
      #=> [{:fly => :d, :data => "D"}]

== Advanced Burp

 TODO

== Contributing to burp
 
* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

== Copyright

Copyright (c) 2011 Dave Martin. See LICENSE.txt for
further details.

